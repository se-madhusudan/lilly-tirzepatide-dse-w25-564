#!/usr/bin/env bash

VERSION=0.0.2

ALTNPM=false
BWD=$( pwd )
FILE=index.html

####
# Require the export-core common code from
# the same path as the running script
#
BINDIR=$(dirname ${0})
CORE=${BINDIR}/core
. ${CORE}

GRES=${BWD}/bin/gres

# Need to experiment with the delete options
# old OPTIONS="--partial --append --stats --delete -avzrp"
OPTIONS="--partial --stats -avzrpq"
EXCLUSIONS="--exclude-from=etc/rsync/exclusions"
PLUGIN_EXCLUSIONS="--exclude-from=etc/rsync/plugin-exclusions"

function executeNPM() {
    if [ "${BRANCH}" = "princess" ]; then
        infoOutput "Building staging version"
        npm run build:staging
    elif [ "${BRANCH}" = "banners" ]; then
        infoOutput "Building banners"
        gulpBuildBanners
        #npm run build:banners
    elif [ "${BRANCH}" = "emails" ]; then
        infoOutput "Building emails"
        gulpBuildEmails
        #npm run build:emails
    else
        infoOutput "Building production version"
        npm run build
    fi
}

function listDist() {
      if [ -d "dist" ] && [ "${DEBUG}" = true ];then
        infoOutput "Listing the contents of the dist folder."
        ls -al dist
      fi
}

function gulpBuildBanners() {
    HASH=$( git rev-parse --short HEAD )
    if [ -e "${BRANCH}" ];then
        pushd "${BRANCH}" || exit 1
        mkdir dist
        listDist
        #cp index.html dist/
        infoOutput "Installing npm stuff."
        npm install
        infoOutput "Executing gulp stuff."
        gulp build
        gulp buildFonts
        gulp zipit
        gulp copyScreenshots
        gulp buildIndex
        debugOutput "Current hash ${HASH}"
        echo "${HASH}" > dist/.revision
        listDist
        popd || exit 1
    fi
}

function gulpBuildEmails() {
    HASH=$( git rev-parse --short HEAD )
    if [ -e ${BRANCH} ];then
        pushd ${BRANCH} || exit 1
        mkdir dist
        listDist
        #cp index.html dist/
        infoOutput "Installing npm stuff."
        npm install
        infoOutput "Executing gulp stuff."
        gulp build
        gulp pkgIt
        gulp copyScreenshots
        gulp buildIndex
        debugOutput "Current hash ${HASH}"
        echo "${HASH}" > dist/.revision
        listDist
        popd || exit 1
    fi
}

function verifyBuildComplete() {
  if [ -e "${BRANCH}/dist" ];then
    pushd "${BRANCH}" || exit 1
    reviewDist
    popd || exit 1
  fi
}

function reviewDist() {
    if [ -e dist ];then
        echo
        infoOutput "Reviewing the completed build."
        ls -al dist
        echo
    fi
}

function build() {
    echo "Building the project."
    pwd
    yarn
    #executeNPM
    npm run build
    reviewDist
}

function systemInfo() {
    echo "Examining what is installed."
    echo 
    npm --version
    node --version
    php --version
    composer --version
    yarn --version
    echo
}

####
# Need to add more HELP details and use a HEREDOC; but for now...
function helpMsg() {
    CMD=${0##*/}
	echo "Usage: ${CMD} -c -t (production|staging|dev)"
	echo "EXAMPLES:"
	echo "CleanUp Dev Build: ${CMD} -c -t dev"
	echo "Standard Dev Build: ${CMD} -t dev"
	echo "Build using GitLab runner: ${CMD} -c -t -g dev"
	echo "Force deploy using WPE's git push: ${CMD} -c -t -g -p dev"
	exit 1
}

function setSiteURL() {
    PROTOCOL="https://"
    if [ "${BRANCH}" = "princess" ]; then
        URL="${PROTOCOL}uat.${PROJECT_PATH}/"
    elif [ "${BRANCH}" = "root" ]; then
        URL="${PROTOCOL}www.${PROJECT_PATH}/"
    fi
    infoOutput "Expiring the custom program on ${URL}."
}

function expireProgram() {
    setSiteURL
    #
    #    pushd "${BRANCH}" || exit 1
    mkdir dist
    ls -al
    infoOutput "Installing expired index.html."
    pushd dist || exit 1
    cp ../etc/expired-INDEX.html index.html
    ls -al
    ${GRES} "EXPIRED-SITE" "${EXPIRED}" "${FILE}"
    ${GRES} "EXPIRED-URL" "${URL}" "${FILE}"
    ls -al
    debugOutput "Current hash" ${HASH}
    echo "$HASH" > .revision
    popd || exit 1
    listDist
    #    popd || exit 1
        #if [ -e "${BRANCH}/dist/index.html" ];then
        #    exit 0
        #fi
    #fi
}

# Main

# Process CLI options
while getopts ":hb:cglpqt:" opt; do
    case ${opt} in
        h )
         helpMsg
        ;;
        b )
            BRANCH=$OPTARG
        ;;
        c )
            CLEANUP=true
        ;;
        g )
            GITLAB=true
        ;;
        l )
            LOCAL=true
        ;;
        p )
            GITPUSH=true
        ;;
        q )
            QUIET=true
        ;;
        t )
            TARGET=$OPTARG
        ;;
        : )
            echo "Option -$OPTARG requires and argument (dev || staging || production)."
            exit 1
        ;;
        \? )
            echo "Invalid Option: -$OPTARG" 1>&2
            exit 1
        ;;
        : )
         helpMsg
        ;;
        * )
         helpMsg
        ;;
    esac
done
shift $((OPTIND -1))

#systemInfo
verifyBranch
isBannerOrEmail

getDest
verifySrcDir
verifyDebugging

####
# @see https://github.com/koalaman/shellcheck/wiki/SC2236
if [ -z "${EXPIRED}" ]; then
    infoOutput "Expired is not set."
    if [ ${ALTNPM} = true ]; then
      executeNPM
    else
      build
    fi
else
    warnOutput "Expiring the program."
    expireProgram
fi

debug
verifyBuildComplete